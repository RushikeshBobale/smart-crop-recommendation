# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dqev4qUJQtKnbkCRQt-OCVuXvgHwvnrt
"""

import pandas as pd
import numpy as np
import gradio as gr
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler, StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

# Load the dataset
crop = pd.read_csv("Crop_recommendation (1).csv")

# Basic data cleaning
crop_dict = {
    'rice': 1, 'maize': 2, 'jute': 3, 'cotton': 4, 'coconut': 5, 'papaya': 6,
    'orange': 7, 'apple': 8, 'muskmelon': 9, 'watermelon': 10, 'grapes': 11,
    'mango': 12, 'banana': 13, 'pomegranate': 14, 'lentil': 15, 'blackgram': 16,
    'mungbean': 17, 'mothbeans': 18, 'pigeonpeas': 19, 'kidneybeans': 20,
    'chickpea': 21, 'coffee': 22
}
reverse_crop_dict = {v: k for k, v in crop_dict.items()}

crop['label'] = crop['label'].map(crop_dict)

# Feature-target split
X = crop.drop('label', axis=1)
y = crop['label']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature scaling
minmax_scaler = MinMaxScaler()
standard_scaler = StandardScaler()

X_train = minmax_scaler.fit_transform(X_train)
X_train = standard_scaler.fit_transform(X_train)

X_test = minmax_scaler.transform(X_test)
X_test = standard_scaler.transform(X_test)

# Model training
model = KNeighborsClassifier(n_neighbors=5)
model.fit(X_train, y_train)

# Model evaluation
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Model trained. Accuracy on test set: {accuracy:.2%}")

# Additional information for crops
crop_info = {
    'rice': {
        "image": "/content/rice.jpg",
        "youtube": "https://youtu.be/4dxzlspJ1eg?si=AAnJcKGAS5mEPKMF"
    },
    'maize': {
        "image": "/content/maize.jpg",
        "youtube": "https://youtu.be/WNUNq4QJ-CM?si=kkSX0ZnGZKXXvR4L"
    },
    'jute': {
        "image": "/content/jute.jpg",
        "youtube": "https://youtu.be/WTHBFn5g9go?si=d1gRR-Gr-8tkDGY4"
    },
    'cotton': {
        "image": "/content/cotton.jpg",
        "youtube": "https://youtu.be/QHgNoSYlhYs?si=bMHvbPajkL8t68Qw"
    },
    'coconut': {
        "image": "/content/coconut.jpg",
        "youtube": "https://youtu.be/MvW3wsr8jyY?si=YnQl23f78d6ExL5U"
    },
    'papaya': {
        "image": "/content/papaya.jpg",
        "youtube": "https://youtu.be/2shR9YM-k5o?si=98PLg1OgBHxBtpXO"
    },
    'orange': {
        "image": "/content/orange.jpg",
        "youtube": "https://youtu.be/n2nYr-Kf5rQ?si=rTvaVEBRz9jfQfZM"
    },
    'apple': {
        "image": "/content/apple.jpg",
        "youtube": "https://youtu.be/cWpQRdWLjTE?si=c8z9GZCggOb7TMRD"
    },
    'muskmelon': {
        "image": "/content/muskmelon.jpg",
        "youtube": "https://youtu.be/9zmmD_8c_Hc?si=N5ZOGznlnAfjenZA"
    },
    'watermelon': {
        "image": "/content/watermelon.jpg",
        "youtube": "https://youtu.be/Am2KWnxJA3k?si=mL301JlXSu5yPjM3"
    },
    'grapes': {
        "image": "/content/grapes.jpg",
        "youtube": "https://youtu.be/8Ik7b6UcDP8?si=vhRonsTs4RpFuNRA"
    },
    'mango': {
        "image": "/content/mango.jpg",
        "youtube": "https://youtu.be/ZGVPDvEzdh4?si=2UcxKUdWZpD-yNxO"
    },
    'banana': {
        "image": "/content/banana.jpg",
        "youtube": "https://youtu.be/s5j9ppaMBWk?si=_UKPUoKbS9NgO6SU"
    },
    'pomegranate': {
        "image": "/content/pomegranate.jpg",
        "youtube": "https://youtu.be/jk03Sgu0xUs?si=FT_URLGXc82Z8rbA"
    },
    'lentil': {
        "image": "/content/lentil.jpg",
        "youtube": "https://youtu.be/Mi_Ys_DaYpw?si=f2zJvfTG8JZwptgK"
    },
    'blackgram': {
        "image": "/content/blackgram.jpeg",
        "youtube": "https://youtu.be/ZynFEdm9Knw?si=gQKBT5ISxbJ8I2PA"
    },
    'mungbean': {
        "image": "/content/mungbean.jpeg",
        "youtube": "https://youtu.be/mrkBqRK64TY?si=-ABsm5xoC8X4dsPO"
    },
    'mothbeans': {
        "image": "/content/mothbeans.jpeg",
        "youtube": "https://youtu.be/tHvxw0i0III?si=UmNK-eaiDCk25D2V"
    },
    'pigeonpeas': {
        "image": "/content/pigeonpeas.jpeg",
        "youtube": "https://youtu.be/jNbbUJPabno?si=ul0Dx6zNKu_WFpVe"
    },
    'kidneybeans': {
        "image": "/content/kidneybeans.jpeg",
        "youtube": "https://youtu.be/GKzD63NZ-kQ?si=oniAQ-a2Hj2b0TeE"
    },
    'chickpea': {
        "image": "/content/chickpea.jpeg",
        "youtube": "https://youtu.be/lCl3Yq5OZjw?si=QpT8vp4U3FL2xMrk"
    },
    'coffee': {
        "image": "/content/coffee.jpeg",
        "youtube": "https://youtu.be/NOHLn3ejC1M?si=8wCugBaRmv3Jo0_I"
    }
}

# Prediction function
def predict_crop(N, P, K, temperature, humidity, ph, rainfall):
    input_features = np.array([[N, P, K, temperature, humidity, ph, rainfall]])
    input_scaled = minmax_scaler.transform(input_features)
    input_scaled = standard_scaler.transform(input_scaled)
    prediction = model.predict(input_scaled)[0]

    crop_name = reverse_crop_dict.get(prediction, "Unknown Crop")
    info = crop_info.get(crop_name, {
        "image": None,
        "steps": "Growing steps not available.",
        "youtube": "https://www.youtube.com"
    })

    # Convert YouTube link to embed iframe
    youtube_link = info["youtube"]
    if "youtu.be" in youtube_link:
        video_id = youtube_link.split("/")[-1].split("?")[0]
    elif "watch?v=" in youtube_link:
        video_id = youtube_link.split("watch?v=")[-1].split("&")[0]
    else:
        video_id = ""  # fallback

    youtube_embed_html = f"""
    <iframe width="560" height="315" src="https://www.youtube.com/embed/{video_id}"
    frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media;
    gyroscope; picture-in-picture" allowfullscreen></iframe>
    """

    return crop_name, info["image"], info.get("steps", "Growing steps not available."), youtube_embed_html

# Gradio Interface
interface = gr.Interface(
    fn=predict_crop,
    inputs=[
        gr.Number(label="Nitrogen (N)"),
        gr.Number(label="Phosphorus (P)"),
        gr.Number(label="Potassium (K)"),
        gr.Number(label="Temperature (Â°C)"),
        gr.Number(label="Humidity (%)"),
        gr.Number(label="pH"),
        gr.Number(label="Rainfall (mm)")
    ],
    outputs=[
        gr.Textbox(label="Recommended Crop"),
        gr.Image(label="Crop Image"),
        gr.Textbox(label="How to Grow"),
        gr.HTML(label="YouTube Tutorial")  # Now returns the embedded YouTube video
    ],
    title="ðŸŒ¾ Smart Crop Recommendation System",
    description="Provide soil and weather details to get a crop suggestion, see its image, and learn how to grow it!"
)

# Launch the interface
interface.launch()